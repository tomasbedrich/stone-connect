[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "stone-connect"
version = "0.1.0"
description = "Async Python library for controlling Stone Connect WiFi electric heaters"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Tomas Bedrich", email = "ja@tbedrich.cz"},
]
keywords = ["stone", "connect", "heater", "wifi", "smart", "home", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp>=3.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
examples = [
    "asyncio",
]

[project.urls]
Homepage = "https://github.com/tomasbedrich/stone-connect"
Documentation = "https://github.com/tomasbedrich/stone-connect#readme"
Repository = "https://github.com/tomasbedrich/stone-connect.git"
Issues = "https://github.com/tomasbedrich/stone-connect/issues"

[project.scripts]
stone-connect-example = "examples.basic_usage:main"

[tool.hatch.build.targets.wheel]
packages = ["stone_connect"]

[tool.ruff]
line-length = 88
target-version = "py38"
src = ["stone_connect", "tests", "examples"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM118", # in-dict-keys
    "ICN001", # unconventional-import-alias
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # raise-without-from-inside-except
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001"]
"examples/*" = ["ARG001"]

[tool.ruff.lint.isort]
known-first-party = ["stone_connect"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=stone_connect",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["stone_connect"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "pytest>=8.3.5",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.0",
]
